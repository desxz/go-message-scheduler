// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen --source=service.go --destination=service_mock.go --package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// RetrieveSentMessages mocks base method.
func (m *MockMessageRepository) RetrieveSentMessages() ([]Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveSentMessages")
	ret0, _ := ret[0].([]Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSentMessages indicates an expected call of RetrieveSentMessages.
func (mr *MockMessageRepositoryMockRecorder) RetrieveSentMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSentMessages", reflect.TypeOf((*MockMessageRepository)(nil).RetrieveSentMessages))
}
