// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen --source=worker.go --destination=worker_mock.go --package=main
//

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	client "github.com/desxz/go-message-scheduler/client"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerMessageStore is a mock of WorkerMessageStore interface.
type MockWorkerMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMessageStoreMockRecorder
	isgomock struct{}
}

// MockWorkerMessageStoreMockRecorder is the mock recorder for MockWorkerMessageStore.
type MockWorkerMessageStoreMockRecorder struct {
	mock *MockWorkerMessageStore
}

// NewMockWorkerMessageStore creates a new mock instance.
func NewMockWorkerMessageStore(ctrl *gomock.Controller) *MockWorkerMessageStore {
	mock := &MockWorkerMessageStore{ctrl: ctrl}
	mock.recorder = &MockWorkerMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerMessageStore) EXPECT() *MockWorkerMessageStoreMockRecorder {
	return m.recorder
}

// FetchAndMarkProcessing mocks base method.
func (m *MockWorkerMessageStore) FetchAndMarkProcessing(ctx context.Context) (*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndMarkProcessing", ctx)
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndMarkProcessing indicates an expected call of FetchAndMarkProcessing.
func (mr *MockWorkerMessageStoreMockRecorder) FetchAndMarkProcessing(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndMarkProcessing", reflect.TypeOf((*MockWorkerMessageStore)(nil).FetchAndMarkProcessing), ctx)
}

// MarkAsFailed mocks base method.
func (m *MockWorkerMessageStore) MarkAsFailed(ctx context.Context, messageID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailed", ctx, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailed indicates an expected call of MarkAsFailed.
func (mr *MockWorkerMessageStoreMockRecorder) MarkAsFailed(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailed", reflect.TypeOf((*MockWorkerMessageStore)(nil).MarkAsFailed), ctx, messageID)
}

// MarkAsSent mocks base method.
func (m *MockWorkerMessageStore) MarkAsSent(ctx context.Context, messageID primitive.ObjectID, webhookMessageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", ctx, messageID, webhookMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockWorkerMessageStoreMockRecorder) MarkAsSent(ctx, messageID, webhookMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockWorkerMessageStore)(nil).MarkAsSent), ctx, messageID, webhookMessageID)
}

// MockWorkerMessageCache is a mock of WorkerMessageCache interface.
type MockWorkerMessageCache struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMessageCacheMockRecorder
	isgomock struct{}
}

// MockWorkerMessageCacheMockRecorder is the mock recorder for MockWorkerMessageCache.
type MockWorkerMessageCacheMockRecorder struct {
	mock *MockWorkerMessageCache
}

// NewMockWorkerMessageCache creates a new mock instance.
func NewMockWorkerMessageCache(ctrl *gomock.Controller) *MockWorkerMessageCache {
	mock := &MockWorkerMessageCache{ctrl: ctrl}
	mock.recorder = &MockWorkerMessageCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerMessageCache) EXPECT() *MockWorkerMessageCacheMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockWorkerMessageCache) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockWorkerMessageCacheMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockWorkerMessageCache)(nil).Set), ctx, key, value)
}

// MockWebhookClient is a mock of WebhookClient interface.
type MockWebhookClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookClientMockRecorder
	isgomock struct{}
}

// MockWebhookClientMockRecorder is the mock recorder for MockWebhookClient.
type MockWebhookClientMockRecorder struct {
	mock *MockWebhookClient
}

// NewMockWebhookClient creates a new mock instance.
func NewMockWebhookClient(ctrl *gomock.Controller) *MockWebhookClient {
	mock := &MockWebhookClient{ctrl: ctrl}
	mock.recorder = &MockWebhookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookClient) EXPECT() *MockWebhookClientMockRecorder {
	return m.recorder
}

// PostMessage mocks base method.
func (m *MockWebhookClient) PostMessage(ctx context.Context, message *client.WebhookRequest) (*client.WebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", ctx, message)
	ret0, _ := ret[0].(*client.WebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockWebhookClientMockRecorder) PostMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockWebhookClient)(nil).PostMessage), ctx, message)
}
